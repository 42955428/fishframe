<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:jdbc="http://www.springframework.org/schema/jdbc"
     xmlns:context="http://www.springframework.org/schema/context"
     xmlns:jaxws="http://cxf.apache.org/jaxws"
     xmlns:mvc="http://www.springframework.org/schema/mvc"  
     xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
     http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
     http://cxf.apache.org/jaxws 
     http://cxf.apache.org/schemas/jaxws.xsd">
     
     <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
           <list>  
              <!-- 这里支持多种寻址方式：classpath和file -->  
              <value>classpath:db.properties</value>  
              <!-- 推荐使用file的方式引入，这样可以将配置和代码分离
              <value>file:/opt/demo/config/demo-mq.properties</value>  
              <value>file:/opt/demo/config/demo-remote.properties</value>  
               -->  
            </list>  
        </property>  
    </bean>  
   
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="shutdown">
        <constructor-arg>
            <bean class="com.zaxxer.hikari.HikariConfig">
                <property name="driverClassName" value="${hikaricp.jdbc.driverClassName}"/>
                <property name="jdbcUrl" value="${hikaricp.url}"/>
                <property name="username" value="${hikaricp.username}"/>
                <property name="password" value="${hikaricp.password}"/>
                <property name="connectionTestQuery" value="${hikaricp.connectionTestQuery}"/>
                <property name="connectionTimeout" value="${hikaricp.connectionTimeout}"/>
                <property name="idleTimeout" value="${hikaricp.idleTimeout}"/>
                <property name="maxLifetime" value="${hikaricp.maxLifetime}"/>
                <property name="maximumPoolSize" value="${hikaricp.maximumPoolSize}"/>
                <property name="minimumIdle" value="${hikaricp.minimumIdle}"/>
            </bean>
        </constructor-arg>
    </bean>

	
	<!-- 自动扫描且只扫描@Controller -->
	<context:component-scan base-package="com.dgaotech.dgfw.controller" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	
	<context:component-scan base-package="com.dgaotech.dgfw.service" />
	

	<mvc:resources  location="/assets/" mapping="/assets/**"/>
	<mvc:resources  location="/upload/" mapping="/upload/**"  />
	
	<!-- 定义JSP文件的位置 -->  
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp"/>
		<property name="suffix" value=".jsp"/>
	</bean> 


	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.dgaotech.dgfw.entity" />
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:/sqlmap/mybatis/*Mapper.xml" />
	</bean>
	
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.dgaotech.dgfw.dao" />
		<property name="annotationClass" value="com.dgaotech.dgfw.dao.MyBatisRepository"/>
	</bean>
	
    <!-- transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    

  	<!-- 将所有具有@Transactional注解的Bean自动配置为声明式事务支持 -->
    <!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	<!-- 设置上传文件的最大尺寸为1MB -->
		<!--<property name="maxUploadSize">
			<value>1024000</value>
		</property>-->
		<property name="defaultEncoding" value="UTF-8"></property>
	</bean>
	
	<!-- 将Controller抛出的异常转到特定/jsp/**.jsp-->
	<bean id="exceptionMappings" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
		<property name="exceptionMappings">  
			<props>
				<prop key="java.lang.Throwable">exception/error</prop>
            </props>  
		</property>  
    </bean>  
    
   	<!-- 拦截器 -->
    <mvc:interceptors >   
		<bean class="com.dgaotech.dgfw.security.SecurityInterceptor">
        	<property name="notFilterPath" value="/assets/,/js/,/css/,/login"/>
        	<property name="loginPath" value="/system/"/>
        </bean>
    </mvc:interceptors>
    
    <mvc:annotation-driven />
    <bean id="SecurityFilter" class="com.dgaotech.dgfw.security.SecurityFilter"></bean>
    
</beans>
